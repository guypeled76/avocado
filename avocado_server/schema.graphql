
type Mutation {
    createIngredient(input: NewIngredient!): Ingredient!
    updateIngredient(input: UpdateIngredient!) : Result
    deleteIngredient(input: DeleteIngredient!) : Result
    
    createChat : Chat!

    createMessage(input: NewMessage!) : Message!
    updateMessage(input: UpdateMessage!) : Result
    deleteMessage(input: DeleteMessage!) : Result

    createPost(input: NewPost!): Post!
    updatePost(input: UpdatePost!) : Result
    deletePost(input: DeletePost!) : Result
}

type Query {
    ingredients: [Ingredient!]!
    chats: [Chat!]!
    chat(chatID:ID!): Chat!
}

scalar Timestamp

type Result {
    status:ResultStatus!
}

enum ResultStatus {
    FAILURE,
    SUCCESS
}

type Ingredient {
    id: ID!
    name: String!
    createdBy: String!
    createdAt: Timestamp!
    deletedAt: Timestamp
}

input NewIngredient {
    name: String!
    createdByID: String!
}

input UpdateIngredient {
    id: String!
    name: String
}

input DeleteIngredient {
    id: String!
}

type Chat {
    id: ID!
    createdAt:Timestamp!
    messages(first:Int, after:String):[Message!]!
}

type Post {
    id: ID!
    text: String!
}

input NewPost {
    text: String!
}

input UpdatePost {
    id:String!
    text: String!
}

input DeletePost {
    id:String!
}


type Message {
    id: ID!
    message: String!
    createdBy: String!
    createAt: Timestamp!
    deletedAt: Timestamp
}

input UpdateMessage {
    message: String
}

input NewMessage {
    chat: String!
    message: String!
}

input DeleteMessage {
    chat: String!
    message: String!
}

type User {
    id: ID!
    name: String!
    email: String!
    image: String!
}




