// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Chat struct {
	ID        string    `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
	Messages  []Message `json:"messages"`
}

type DeleteIngredient struct {
	ID string `json:"id"`
}

type DeleteMessage struct {
	Chat    string `json:"chat"`
	Message string `json:"message"`
}

type DeletePost struct {
	ID string `json:"id"`
}

type Ingredient struct {
	ID        string     `json:"id"`
	Name      string     `json:"name"`
	CreatedBy string     `json:"createdBy"`
	CreatedAt time.Time  `json:"createdAt"`
	DeletedAt *time.Time `json:"deletedAt"`
}

type Message struct {
	ID        string     `json:"id"`
	Message   string     `json:"message"`
	CreatedBy string     `json:"createdBy"`
	CreateAt  time.Time  `json:"createAt"`
	DeletedAt *time.Time `json:"deletedAt"`
}

type NewIngredient struct {
	Name        string `json:"name"`
	CreatedByID string `json:"createdByID"`
}

type NewMessage struct {
	Chat    string `json:"chat"`
	Message string `json:"message"`
}

type NewPost struct {
	Text string `json:"text"`
}

type Post struct {
	ID   string `json:"id"`
	Text string `json:"text"`
}

type Result struct {
	Status ResultStatus `json:"status"`
}

type UpdateIngredient struct {
	ID   string  `json:"id"`
	Name *string `json:"name"`
}

type UpdateMessage struct {
	Message *string `json:"message"`
}

type UpdatePost struct {
	ID   string `json:"id"`
	Text string `json:"text"`
}

type User struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
	Image string `json:"image"`
}

type ResultStatus string

const (
	ResultStatusFailure ResultStatus = "FAILURE"
	ResultStatusSuccess ResultStatus = "SUCCESS"
)

var AllResultStatus = []ResultStatus{
	ResultStatusFailure,
	ResultStatusSuccess,
}

func (e ResultStatus) IsValid() bool {
	switch e {
	case ResultStatusFailure, ResultStatusSuccess:
		return true
	}
	return false
}

func (e ResultStatus) String() string {
	return string(e)
}

func (e *ResultStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResultStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResultStatus", str)
	}
	return nil
}

func (e ResultStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
