
type Mutation {
    logon: Result
}

type Query {
    currentUser: User!
}

scalar Timestamp

type Result {
    status:ResultStatus!
}

enum ResultStatus {
    FAILURE,
    SUCCESS
}

input ResultsFilter {
    sortOrder:ResultsOrder
    sortBy:ResultsSortBy
    contains:String
    startsWith:String
    endsWith:String
    limit:Int
    after:Timestamp
    before:Timestamp
    hashtags:[ID!]
}

enum ResultsOrder {
    Descending,
    Ascending
}

enum ResultsSortBy {
    CreatedAt,
    UpdatedAt,
    DeletedAt,
    Name,
}

directive @require(permission: String!) on FIELD_DEFINITION










